Hello. The following points showcases where we found flaws in your design/implementation:

1.UML Class diagram
We couldn't find any methods or attributes/fields in the diagram. Adding the methods and attributes would most likely add better overview for someone that has only looked at the diagrams. Also, it has somewhat of a messy outlook, which has perhaps causes you to miss some of the association notations. For example, CreateNewMember class, this class has no association notation connected to it, and im also sceptical if that class should go directly to a MainMenu class and not a member class? Another question could also be, do you need that class? Same goes for DeleteMember class, these resemble more of what a method should be and not a class. BoatManager class could just be in the boat class as well. But do keep in mind that these are only suggestions, and that these suggestions might contain flaws. 
Take a look at the SeeSpecificMember Class and its association to the MainMenu class, the diagram doesn't tell how many members the MainMenu class can update, perhaps you should 1...* be at the start of the MainMenu class from the MemberUpdate class? As the there could be alot of potential members in the system that needs to be updated. All in all, you should add more methods and attributes and add the association notation to your diagram, and lastly perhaps shorten down on the classes. 
2. Sequence diagrams
This diagram doesn't really cover much, and you should probably add a sequence diagram for each of the requirements. For example, how does the sequence between the classes and methods look when a user is deleting a member? Or when they are updating something in the system? Or listing? The simplest approach in my opinion right now would be to look at your implementation, and just write down the classes and methods that are used when taking care of a requirement. Your diagram showcases somewhat of a showing of your members, but it doesn't show what kinda list it is. Make a sequence diagram for each of the requirements and look at your code on how to see what classes and methods that involved, then just add them in a the sequence that they work together as.
3. The implementation:
Create a member
I created 2 members and then listed them using the compact list, but I gave the members personalnumber 1 and 2, when listed it showed me 0 on both. However, when I chose to look at specific member info and looked at a member, it showed me the correct personalnumber.Same thing happend with the verbose list. It also seems that the change member options created a new member instead of changing the member that was selected? When I tried to add a boat it also created a new member. This is also creates duplicates of your ID number. When I tried to delete a boat from each of the members I added, it didn't work, or perhaps its the listing that doesnt work properly. The update boat doesn't seem to work. However, the read from the files and display works and displaying them also works, removing works. Writing to the files works. Looking at your code I think it looks fine. You have alot of classes, more than I use, which perhaps can give the program a better overview. I think you also have placed the classes in the right packages. The program also seem to be correctly encapsulated. You could have maybe have added an iterator and interaces. 

Overall
There are somethings missing. Try and focus on fixing them. 

 